#[cfg(test)]
mod tests {

    #[test]
    fn forall_block_test() {
        //(module (func (export "addTwo") (param i32 i32) (result i32)
        //     (local $c i32)
        //     (forall
        //       local.get 0
        //       local.get 1
        //       i32.add
        //       local.set $c
        //     )
        //     local.get $c
        // ))
        let wasm = [
            0x0, 0x61, 0x73, 0x6d, 0x1, 0x0, 0x0, 0x0, 0x1, 0x7, 0x1, 0x60, 0x2, 0x7f, 0x7f, 0x1,
            0x7f, 0x3, 0x2, 0x1, 0x0, 0x7, 0xa, 0x1, 0x6, 0x61, 0x64, 0x64, 0x54, 0x77, 0x6f, 0x0,
            0x0, 0xa, 0x13, 0x1, 0x11, 0x1, 0x1, 0x7f, // before forall block
            0xfc, 0x3a, // forall
            0x40, // type Empty
            0x20, 0x0, // local.get 0
            0x20, 0x1,  // local.get 1
            0x6a, // i32.add
            0x21, 0x2, // local.set $c
            0xb, // end forall
            0x20, 0x2, // local.get $c
            0xb, // end block
            0x0, 0xd, 0x4, 0x6e, 0x61, 0x6d, 0x65, 0x2, 0x6, 0x1, 0x0, 0x1, 0x2, 0x1, 0x63,
        ];
        let mut validator = wasmparser::Validator::default();
        validator.validate_all(&wasm).unwrap();
    }

    #[test]
    fn exists_block_test() {
        //(module (func (export "addTwo") (param i32 i32) (result i32)
        //     (local $c i32)
        //     (exists
        //       local.get 0
        //       local.get 1
        //       i32.add
        //       local.set $c
        //     )
        //     local.get $c
        // ))
        let wasm = [
            0x0, 0x61, 0x73, 0x6d, 0x1, 0x0, 0x0, 0x0, 0x1, 0x7, 0x1, 0x60, 0x2, 0x7f, 0x7f, 0x1,
            0x7f, 0x3, 0x2, 0x1, 0x0, 0x7, 0xa, 0x1, 0x6, 0x61, 0x64, 0x64, 0x54, 0x77, 0x6f, 0x0,
            0x0, 0xa, 0x13, 0x1, 0x11, 0x1, 0x1, 0x7f, // before exists block
            0xfc, 0x3b, // exists
            0x40, // type Empty
            0x20, 0x0, // local.get 0
            0x20, 0x1,  // local.get 1
            0x6a, // i32.add
            0x21, 0x2, // local.set $c
            0xb, // end exists
            0x20, 0x2, // local.get $c
            0xb, // end block
            0x0, 0xd, 0x4, 0x6e, 0x61, 0x6d, 0x65, 0x2, 0x6, 0x1, 0x0, 0x1, 0x2, 0x1, 0x63,
        ];
        let mut validator = wasmparser::Validator::default();
        validator.validate_all(&wasm).unwrap();
    }

    #[test]
    fn assume_block_test() {
        //(module (func (export "addTwo") (param i32 i32) (result i32)
        //     (local $c i32)
        //     (assume
        //       local.get 0
        //       local.get 1
        //       i32.add
        //       local.set $c
        //     )
        //     local.get $c
        // ))
        let wasm = [
            0x0, 0x61, 0x73, 0x6d, 0x1, 0x0, 0x0, 0x0, 0x1, 0x7, 0x1, 0x60, 0x2, 0x7f, 0x7f, 0x1,
            0x7f, 0x3, 0x2, 0x1, 0x0, 0x7, 0xa, 0x1, 0x6, 0x61, 0x64, 0x64, 0x54, 0x77, 0x6f, 0x0,
            0x0, 0xa, 0x13, 0x1, 0x11, 0x1, 0x1, 0x7f, // before assume block
            0xfc, 0x3c, // assume
            0x40, // type Empty
            0x20, 0x0, // local.get 0
            0x20, 0x1,  // local.get 1
            0x6a, // i32.add
            0x21, 0x2, // local.set $c
            0xb, // end assume
            0x20, 0x2, // local.get $c
            0xb, // end block
            0x0, 0xd, 0x4, 0x6e, 0x61, 0x6d, 0x65, 0x2, 0x6, 0x1, 0x0, 0x1, 0x2, 0x1, 0x63,
        ];
        let mut validator = wasmparser::Validator::default();
        validator.validate_all(&wasm).unwrap();
    }
}
